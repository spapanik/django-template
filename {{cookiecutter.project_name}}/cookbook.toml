["$globals"]
shell = "bash"
vars = [
    { settings = "{{cookiecutter.project_name}}.settings" },
    { env_vars = "DJANGO_SETTINGS_MODULE=${settings}" },
    { admin = "${env_vars} django-admin" },
    { "[weak]PGDATABASE" = "{{cookiecutter.project_name}}" },
    { static_verbosity = "0" },
    { input = "--no-input" },
    { css_style = "expanded" },
    { css_map = "--no-source-map" },
    { interactive = "--non-interactive" },
    { scss_files = "$((glob **/static/*/css/*.scss))" },
    { css_files = "$((change_suffix ${scss_files} .css))" },
    { po_files = "$((glob locale/*/LC_MESSAGES/django.po))" },
    { mo_files = "$((sub .po .mo ${po_files}))" },
]

[all]
alias = "install"

[update]
alias = "install"

[install]
phony = true
keep_ts = true
requires = [
    "install_py",
    "db",
    "migrations",
    "static",
]

[install_py]
phony = true
keep_ts = true
requires = [
    "poetry.lock",
]
commands = [
    "poetry install --remove-untracked ${poetry_extra}",
]

[format]
phony = true
requires = [
    "install_py",
]
commands = [
    "isort .",
    "black .",
]

[lint]
phony = true
requires = [
    "install_py",
]
commands = [
    "isort --check .",
    "black --check .",
    "flake8 .",
    "mypy .",
    "${admin} checkmigrations",
    "${admin} check",
]

[tests]
phony = true
requires = [
    "install",
]
commands = [
    "${env_vars} pytest ${pytest_args} ${pytest_path}",
]

["poetry.lock"]
requires = [
    "pyproject.toml",
]
commands = [
    "poetry lock && touch ${.target}",
]

[db]
phony = true
vars = [
    { db_exists = "SELECT EXISTS (SELECT 1 FROM pg_database WHERE datname = '${PGDATABASE}')" },
    { db_base = "template1" },
]
keep_ts = true
exists_only = true
existence_command = """[ $(psql -d ${db_base} -tAXc "${db_exists}") = "t" ]"""
commands = [
    "createdb ${PGDATABASE}",
]

[migrations]
phony = true
keep_ts = true
requires = [
    "install_py",
    "db",
    "migrations.lock",
]
commands = [
    "${admin} migrate ${input}",
]

[install_js]
phony = true
keep_ts = true
requires = [
    "yarn.lock",
]
commands = [
    "yarn install ${interactive} ${yarn_extra}",
]

["yarn.lock"]
requires = [
    "package.json",
]
commands = [
    "yarn generate-lock-entry > ${.target}",
]

[css]
phony = true
requires = [
    "${css_files}",
]

["(?P<basename>.+)\\.css"]
regex = true
requires = [
    "${basename}.scss",
]
commands = [
  "sass -s ${css_style} ${css_map} ${.requirements:0} ${.target}"
]

[staticfiles]
phony = true
keep_ts = true
requires = [
    "install_py",
]
commands = [
    """${admin} collectstatic ${input} -v ${static_verbosity} -i "*.scss" ${static_extra}"""
]

[static]
phony = true
keep_ts = true
requires = [
    "install_js",
    "css",
    "staticfiles",
]


["locale/(?P<language>.+)/LC_MESSAGES/django\\.mo"]
regex = true
requires = [
    "install_py",
    "locale/${language}/LC_MESSAGES/django.po"
]
commands = [
    "${admin} compilemessages --locale=${language}",
]

[translations]
phony = true
requires = [
    "${mo_files}",
]
